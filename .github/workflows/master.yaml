name: Build and Deploy

on:
    push:
        tags:
            - '*'

env:
    TAG_VERSION: ${{ github.ref_name }}
    DOCKER_REGISTRY: docker.io
    DOCKER_USER: ${{ secrets.DOCKER_USER }}
    DOCKER_PASS: ${{ secrets.DOCKER_PASSWORD }}
    DOCKER_DATABASE_IMAGE_NAME: swdbapp-database
    DOCKER_BACKEND_IMAGE_NAME: swdbapp-backend
    PG_USER: ${{ secrets.POSTGRES_USER }}
    PG_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    PG_HOST: ${{ secrets.POSTGRES_HOST }}
    PG_PORT: 5432
    PG_DATABASE: ${{ secrets.POSTGRES_DB }}
    BACKEND_ACCEPT_ORIGIN: https://wolfchamane.com
    BACKEND_PORT: 3000
    API_KEY: ${{ secrets.API_KEY }}
#    VITE_API_HOST: ${{ secrets.API_HOST }}
#    VITE_API_PORT: ${{ secrets.API_PORT }}
#    VITE_API_PROTOCOL: https
#    VITE_ASSETS_PATH: ${{ secrets.ASSETS_PATH }}

jobs:
    database:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.SWDBAPP_SSH_PAT }}
                  submodules: 'recursive'

            - name: Detect package manager
              id: detect-package-manager
              run: |
                  if [ -f "${{ github.workspace }}/yarn.lock" ]; then
                    echo "manager=yarn" >> $GITHUB_OUTPUT
                    echo "command=install" >> $GITHUB_OUTPUT
                    echo "runner=yarn" >> $GITHUB_OUTPUT
                    exit 0
                  elif [ -f "${{ github.workspace }}/package.json" ]; then
                    echo "manager=npm" >> $GITHUB_OUTPUT
                    echo "command=ci" >> $GITHUB_OUTPUT
                    echo "runner=npx --no-install" >> $GITHUB_OUTPUT
                    exit 0
                  else
                    echo "Unable to determine package manager"
                    exit 1
                  fi

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  cache: ${{ steps.detect-package-manager.outputs.manager }}

            - name: Update NPM
              run: npm i -g npm

            - name: Install dependencies
              run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

            - name: Execute Database INSERT *.sql files
              run: ./scripts/database.generate.sh

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ env.DOCKER_USER }}
                  password: ${{ env.DOCKER_PASS }}

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Publish Database Image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  file: ./apps/database/Dockerfile
                  platforms: linux/amd64
                  push: true
                  tags:
                    - ${{env.DOCKER_USER}}/${{ env.DOCKER_DATABASE_IMAGE_NAME }}:${{ env.TAG_VERSION }}
                    - ${{env.DOCKER_USER}}/${{ env.DOCKER_DATABASE_IMAGE_NAME }}:lastest

#            - name: Inspect Docker Image
#              run: |
#                docker image inspect ${{ env.REGISTRY }}/${{env.DOCKER_USER}}/${{ env.DOCKER_DATABASE_IMAGE_NAME }}:latest

    backend:
        runs-on: ubuntu-latest
        needs: database
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.SWDBAPP_SSH_PAT }}
                  submodules: 'recursive'

            - name: Detect package manager
              id: detect-package-manager
              run: |
                  if [ -f "${{ github.workspace }}/yarn.lock" ]; then
                    echo "manager=yarn" >> $GITHUB_OUTPUT
                    echo "command=install" >> $GITHUB_OUTPUT
                    echo "runner=yarn" >> $GITHUB_OUTPUT
                    exit 0
                  elif [ -f "${{ github.workspace }}/package.json" ]; then
                    echo "manager=npm" >> $GITHUB_OUTPUT
                    echo "command=ci" >> $GITHUB_OUTPUT
                    echo "runner=npx --no-install" >> $GITHUB_OUTPUT
                    exit 0
                  else
                    echo "Unable to determine package manager"
                    exit 1
                  fi

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  cache: ${{ steps.detect-package-manager.outputs.manager }}

            - name: Update NPM
              run: npm i -g npm

            - name: Install dependencies
              run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ env.DOCKER_USER }}
                  password: ${{ env.DOCKER_PASS }}

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Publish Backend Image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  file: ./apps/backend/Dockerfile
                  platforms: linux/amd64
                  push: true
                  build-args:
                      - BACKEND_ACCEPT_ORIGIN: ${{ env.BACKEND_ACCEPT_ORIGIN }}
                      - BACKEND_PORT: ${{ env.BACKEND_PORT }}
                      - PG_PORT: ${{ env.PG_PORT }}
                      - PG_HOST: ${{ env.PG_HOST }}
                      - PG_USER: ${{ env.PG_USER }}
                      - PG_PASSWORD: ${{ env.PG_PASSWORD }}
                      - PG_DATABASE: ${{ env.PG_DATABASE }}
                      - API_KEY: ${{ env.API_KEY }}
                  tags:
                    - ${{env.DOCKER_USER}}/${{ env.DOCKER_BACKEND_IMAGE_NAME }}:${{ env.TAG_VERSION }}
                    - ${{env.DOCKER_USER}}/${{ env.DOCKER_BACKEND_IMAGE_NAME }}:lastest

#            - name: Inspect Docker Image
#              run: |
#                docker image inspect ${{ env.REGISTRY }}/${{env.DOCKER_USER}}/${{ env.DOCKER_BACKEND_IMAGE_NAME }}:latest
