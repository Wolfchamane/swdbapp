name: Build and Deploy

on:
    push:
        branches:
            - master

env:
    DOCKER_REGISTRY: docker.io
    DOCKER_USER: ${{ secrets.DOCKER_USER }}
    DOCKER_PASS: ${{ secrets.DOCKER_PASSWORD }}
    DATABASE_IMAGE_TAG: ${{ secrets.DOCKER_USER }}/swdbapp-assets
#     PGUSER: ${{ secrets.POSTGRES_USER }}
#     PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
#     PGHOST: ${{ secrets.PG_HOST }}
#     PGPORT: 5432
#     PGDATABASE: ${{ secrets.POSTGRES_DB }}
#     BACKEND_ACCEPT_ORIGIN: https://wolfchamane.com
#     BACKEND_PORT: 3000
#     VITE_API_KEY: ${{ secrets.API_KEY }}
#     FTP_SERVER: ${{ secrets.FTP_SERVER }}
#     FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
#     FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}

jobs:
    deploy_database:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.SWDBAPP_SSH_PAT }}
                  submodules: 'recursive'

            - name: Detect package manager
              id: detect-package-manager
              run: |
                  if [ -f "${{ github.workspace }}/yarn.lock" ]; then
                    echo "manager=yarn" >> $GITHUB_OUTPUT
                    echo "command=install" >> $GITHUB_OUTPUT
                    echo "runner=yarn" >> $GITHUB_OUTPUT
                    exit 0
                  elif [ -f "${{ github.workspace }}/package.json" ]; then
                    echo "manager=npm" >> $GITHUB_OUTPUT
                    echo "command=ci" >> $GITHUB_OUTPUT
                    echo "runner=npx --no-install" >> $GITHUB_OUTPUT
                    exit 0
                  else
                    echo "Unable to determine package manager"
                    exit 1
                  fi

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  cache: ${{ steps.detect-package-manager.outputs.manager }}

            - name: Update NPM
              run: npm i -g npm

            - name: Install dependencies
              run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

            - name: Execute Database INSERT *.sql files
              run: ./scripts/database.generate.sh

            -   name: Login to Docker Hub
                uses: docker/login-action@v3
                with:
                    registry: ${{ env.REGISTRY }}
                    username: ${{ env.DOCKER_USER }}
                    password: ${{ env.DOCKER_PASS }}

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build and push to Docker image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  file: ./apps/database/Dockerfile
                  platforms: linux/amd64
                  push: true
                  tags: ${{ env.DATABASE_IMAGE_TAG }}:latest

            - name: Inspect
              run: |
                  docker image inspect ${{ env.REGISTRY }}/${{ env.DATABASE_IMAGE_TAG }}:latest

    # deploy_assets:
    #     runs-on: ubuntu-latest
    #     needs: lint
    #     steps:
    #         - name: Checkout Repository
    #           uses: actions/checkout@v4
    #           with:
    #               token: ${{ secrets.SWDBAPP_SSH_PAT }}
    #               submodules: 'recursive'
    #         - name: Install Heroku CLI
    #           run: |
    #             curl https://cli-assets.heroku.com/install.sh | sh
    #         - uses: akhileshns/heroku-deploy@v3.14.15
    #           with:
    #             appdir: './www/software/swdbapp/assets'
    #             usedocker: true
    #             heroku_api_key: ${{secrets.HEROKU_API_KEY}}
    #             heroku_app_name: swdbapp-assets
    #             heroku_email: arturo.martinez@amartinez.dev
