name: Build and Deploy

on:
    push:
        branches:
            - master

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
    contents: read
    pages: write
    id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
    group: 'pages'
    cancel-in-progress: false

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            - name: Detect package manager
              id: detect-package-manager
              run: |
                  if [ -f "${{ github.workspace }}/yarn.lock" ]; then
                    echo "manager=yarn" >> $GITHUB_OUTPUT
                    echo "command=install" >> $GITHUB_OUTPUT
                    echo "runner=yarn" >> $GITHUB_OUTPUT
                    exit 0
                  elif [ -f "${{ github.workspace }}/package.json" ]; then
                    echo "manager=npm" >> $GITHUB_OUTPUT
                    echo "command=ci" >> $GITHUB_OUTPUT
                    echo "runner=npx --no-install" >> $GITHUB_OUTPUT
                    exit 0
                  else
                    echo "Unable to determine package manager"
                    exit 1
                  fi
            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  cache: ${{ steps.detect-package-manager.outputs.manager }}
            - name: Install dependencies
              run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
            - name: Check code format
              run: ${{ steps.detect-package-manager.outputs.runner }} npm run format:check
            # - name: Check linting rules
            #   run: ${{ steps.detect-package-manager.outputs.runner }} npm run lint:check
            # - name: Check unit tests
            #   run: ${{ steps.detect-package-manager.outputs.runner }} npm run test:check:coverage
            # - name: Check types integrity
            #   run: ${{ steps.detect-package-manager.outputs.runner }} npm run type:check
    build_and_deploy:
        runs-on: ubuntu-latest
        needs: lint
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            - name: Detect package manager
              id: detect-package-manager
              run: |
                  if [ -f "${{ github.workspace }}/yarn.lock" ]; then
                    echo "manager=yarn" >> $GITHUB_OUTPUT
                    echo "command=install" >> $GITHUB_OUTPUT
                    echo "runner=yarn" >> $GITHUB_OUTPUT
                    exit 0
                  elif [ -f "${{ github.workspace }}/package.json" ]; then
                    echo "manager=npm" >> $GITHUB_OUTPUT
                    echo "command=ci" >> $GITHUB_OUTPUT
                    echo "runner=npx --no-install" >> $GITHUB_OUTPUT
                    exit 0
                  else
                    echo "Unable to determine package manager"
                    exit 1
                  fi
            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  cache: ${{ steps.detect-package-manager.outputs.manager }}
            - name: Install dependencies
              run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
            - name: Build project
              run: ${{ steps.detect-package-manager.outputs.runner }} npm run build-only
            - name: Upload artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: ./www/software/swdbapp
            - name: Deploy to Static
              uses: SamKirkland/FTP-Deploy-Action@v4.3.5
              with:
                  server: ${{ secrets.FTP_SERVER }}
                  username: ${{ secrets.FTP_USERNAME }}
                  password: ${{ secrets.FTP_PASSWORD }}
                  port: 21
                  protocol: ftp
                  local-dir: ./www/software/swdbapp/
                  server-dir: wolfchamane.com/software/swdbapp/
    # Deployment job for GitHub Pages
    # deploy_pages:
    #     environment:
    #         name: github-pages
    #         url: ${{ steps.deployment.outputs.page_url }}
    #     runs-on: ubuntu-latest
    #     needs: build_and_deploy
    #     steps:
    #         - name: Deploy to GitHub Pages
    #           id: deployment
    #           uses: actions/deploy-pages@v4
